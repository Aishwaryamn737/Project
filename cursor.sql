Use EShop
--This is a comment

--Get all Products
Select * from Product

--Get all products that has categoryId = 12
Select * from Product
Where CategoryId = 12

--Get total cost of products listed with categoryId = 12
Select Sum(Cost) from Product
Where CategoryId = 12

--Get product name, cost from product table
Select Name, Cost from Product

--Save above as view
Create VIEW vw_Product AS
(Select Name, Cost from Product)

--See the view
Select * from vw_Product

--Get all products that starts with "B"
Select * from Product
Where Name Like 'L%'

--Get all the products that have the seconld character as "e"
Select * from Product
Where Name Like '_e%'

--Get all products whose cost is not equal to 1100
Select * from Product
Where Cost <> 1100

--'^%s$' => This word starts (^) with any character and contains 's' at the end ($)
--Strats with anything , has J in a word and ends with a
Select * from Product
Where Name like '%j%a'

--Select all products with names AS "Lehanga", 'skirt'
Select * from Product
Where Name = 'Lehanga'OR Name = 'Jumka'

--Better technique 
Select * from Product
Where Name in ('Lehanga','Jumka')

--Get all products having a  category id matching in productcategory table
Select * from Product
Where CategoryId IN (Select  Id from ProductCategory)

--Get Customer NNmae and Order Id for all Customers
--Customer table has customer name
--Order Id is in Orders table
Select [Name], [OrderId] from Customer, Orders
Where Customer.id = Orders.CustomerId

--Get total revenue generated by Anna'
--Customer Nmae from Customer table
---Total cost from product
--Orders table contains Customer purchases

Select SUM(Cost)
From Orders, Customer, Product
Where Orders.CustomerId = Customer.Id
And Orders.ProductId = ProductId
And Customer.Name = 'Anna'

--1. Get all Customer Details
Select * from Customer


---2. Get all Customer Orders. CustomerId, OrderId
Select OrderId, CustomerId from Orders, Customer
Where Orders.CustomerId = Customer.Id

--3. Get total revenue generated by Customer Name = 'Mary'
Select SUM(Cost)
From Orders, Customer, Product
Where Orders.CustomerId = Customer.Id
And Orders.ProductId = ProductId
And Customer.Name = 'Mary'

--4. Get Order Details for cost > 900
Select [OrderId] , [Cost] From ORDERS, Product
Where Orders.ProductId = Product.Id
And Cost > 900

--5. Get Order Details for Dates between Oct 1, 2022 and Oct 30, 2022
Select * from Orders
Where OrderDate between '2022-10-05' and '2022-12-01' 

--6. Get Customer Name, Product Name Purchased, Product Cost for all customers
Select Customer.[Name], Product.[Name],[Cost] from Customer, Orders, Product
where Orders.CustomerId = Customer.Id
And Orders.ProductId = Product.Id

--7. Get All Customers that contain third letter as 'r' and last letter as 'y'
Select * from Customer 
Where Name LIKE '__r%y'

--Get the top 2 most expensive orders
Select top 2 * from Orders, Product
where Orders.ProductId = Product.Id
Order By Product.Cost desc

--Get all order details grouped bt Status
Select count(*), [Status], ProductId from Orders
group by [Status], ProductId

--Group all products (total products count) by category name
Create view vw_GetProductCountByCategory As 
(Select count(*) as [TotalProducts],  ProductCategory.[Name]  from Product, ProductCategory
where ProductCategory.Id =  Product.CategoryId
group by  ProductCategory.[Name]
Having ProductCategory.[Name] like '%e%'
And Count(*) < 3)

/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [TotalProducts]
      ,[Name]
  FROM [EShop].[dbo].[vw_GetProductCountByCategory]
  Where [Name] = 'Lights'
  
CREATE Procedure sp_GetProcedureCountByCategory
AS
BEGIN
	Select count(*) as [TotalProducts],  ProductCategory.[Name]  from Product, ProductCategory
	where ProductCategory.Id =  Product.CategoryId
	group by  ProductCategory.[Name]
	Having ProductCategory.[Name] like '%e%'
	And Count(*) < 3
	Order by count(*), ProductCategory.[Name] desc
END

--Execute stored Procedure
Exec [dbo].[sp_GetProcedureCountByCategory]

--=========================================================================================================================
--Function : Get the most expensive product
CREATE  Function fn_GetMaxProductCost()
Returns BigInt 
As
BEGIN
DECLARE @result BigInt
Select @result =  max(Cost) FROM Product
return @result
END

--Function : Get the least expensive product
CREATE  Function fn_GetMinProductCost()
Returns BigInt 
As
BEGIN
DECLARE @result BigInt
Select @result =  min(Cost) FROM Product
return @result
END

--=======Executing functions
Select [dbo].[fn_GetMaxProductCost]() as[Most-Expensive],
		[dbo].[fn_GetMinProductCost]() as[Least-Expensive]


--Executing functions with normal table columns
Select [dbo].[fn_GetMaxProductCost]() as [Most Expensive], [Name]
FROM  Product
WHERE [Cost] = [dbo].[fn_GetMaxProductCost]()

--==============Function that returns a table
CREATE FUNCTION fn_SampleTable()
RETURNS TABLE
AS
RETURN
(
 --Add the Select statemnet with parameter references here
 SELECT Product.[Name] as [ProductName], ProductCategory.[Name]as [CategoryName]
 FROM
 Product, ProductCategory
 WHERE
 Product.CategoryId = ProductCategory.Id
)

--===========Executing a function that returns a table
SELECT * FROM [dbo].[fn_SampleTable]()

---================Working with Joins with Pre-DEfined Keywords
Select  * from Customer Inner Join Orders
			ON  Orders.CustomerId = Customer.Id 
			WHERE Customer.Name LIKE '%a%'

---============Left outer join : All records of left and only matching records of right
SELECT * FROM Customer LEFT OUTER JOIN Orders
				on Customer.Id = Orders.CustomerId

--====Right outer join : All records of right and only matching records of left
SELECT * FROM Customer RIGHT OUTER JOIN Orders
				on Customer.Id = Orders.CustomerId


--Creating a duplicate table for customers


--====Full Outer Join : All records of left + matching records of right &&
	-------------------All records of right + matching records of left
	-------------------wherever match is not found null is substituted
select * FROM  Product FULL OUTER JOIN Customer
						ON Product.Id = Customer.Id


----====CROSS JOIN :Random permution and combination (Product of records of both tables)
Select * from Product CROSS JOIN Customer



/*
	select  *.. from
	where lhs = rhs and lhs = rhs
	group by
	having
	order by
*/

--======Inserting mamually to product table
USE [EShop]
GO

INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('Dummy',500,11)
		   INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('summy',500,11)
		   INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('funny',500,11)
		   INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('mummy',500,11)
GO

select * from Audit 

--Add customer then automatically add s dummy order

Alter Procedure sp_InsertNewCustomer(@Name NVARCHAR(50), @Email NVARCHAR(50))
AS
BEGIN 
BEGIN TRANSACTION T1
INSERT INTO [dbo].[Customer]
           ([Name]
           ,[Email])
     VALUES
           (@Name, @Email)

IF @@ERROR <> 0
	ROLLBACK Transaction T1

DECLARE @Cid INT
SET @Cid = @@Identity  --Automatically stores the auto-generated pKey

INSERT INTO [dbo].[Orders]
           ([Status]
           ,[OrderDate]
           ,[ProductId]
           ,[CustomerId])
     VALUES
           ('In-Progress',GetDate(),1009,@Cid)

COMMIT TRANSACTION T1
END

--Execute above procedure
exec [dbo].[sp_InsertNewCustomer] 'Sheena', 'sheena@kpmg.com'
select top 1 * from Customer order by id desc
select top 1 * from Orders order by OrderId desc

delete Product WHERE [Name] = 'Funny'

Select * from Product
Where [Name] = 'Funny'

USE [EShop]
GO

UPDATE [dbo].[Product]
   SET [Name] = 'Jhommer'
      ,[Cost] = 150000
      ,[CategoryId] = 11
 WHERE Product.[Name] = 'Summy'
GO


--In case of dependant tables. Right click on table -> view dependencies
--Delete the data first from the dependent table
--Then continue to delete data from your desired table
delete orders where ProductId IN (Select Id from Product
									Where Product.categoryId = 11)

delete Product where CategoryId = 11

Delete ProductCategory
Where [Name] = 'Lights'

--requirement 
--depending on how amny products belong to a product category
--Display a message that productcategory is trending 
-- /No products in productcategory
-- /Normal purchases for ProductCategory
Declare @ProductCount INT
Declare @Category nvarchar(50)
Declare cur_TrendingCategories CURSOR FOR
	Select Count(Product.[Name] ) as [ProductCount], ProductCategory.[Name]
	from Product Right Outer Join ProductCategory
	on Product.CategoryId = ProductCategory.Id
	Group By ProductCategory.[Name]

Open cur_TrendingCategories
Fetch Next From cur_TrendingCategories
Into @ProductCount, @Category
--Logic
WHILE @@FETCH_STATUS = 0
BEGIN
	If @ProductCount > 3
		Print @Category + ' is trending';
	Else if @ProductCount > 0 and @ProductCount <= 3
		Print @Category + ' has normal purchase';
	Else 
		Print @Category + ' has no new products'

Fetch Next from cur_TrendingCategories Into @ProductCount, @Category
END 
--End of row by row processing
Close cur_TrendingCategories
DeAllocate  cur_TrendingCategories

